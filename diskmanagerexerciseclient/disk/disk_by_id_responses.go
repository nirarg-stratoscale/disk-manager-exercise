// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Stratoscale/disk-manager-exercise/models"
)

// DiskByIDReader is a Reader for the DiskByID structure.
type DiskByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DiskByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDiskByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDiskByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDiskByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDiskByIDOK creates a DiskByIDOK with default headers values
func NewDiskByIDOK() *DiskByIDOK {
	return &DiskByIDOK{}
}

/*DiskByIDOK handles this case with default header values.

successful operation
*/
type DiskByIDOK struct {
	Payload *models.Disk
}

func (o *DiskByIDOK) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdOK  %+v", 200, o.Payload)
}

func (o *DiskByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Disk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDBadRequest creates a DiskByIDBadRequest with default headers values
func NewDiskByIDBadRequest() *DiskByIDBadRequest {
	return &DiskByIDBadRequest{}
}

/*DiskByIDBadRequest handles this case with default header values.

Invalid disk ID
*/
type DiskByIDBadRequest struct {
}

func (o *DiskByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdBadRequest ", 400)
}

func (o *DiskByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDiskByIDNotFound creates a DiskByIDNotFound with default headers values
func NewDiskByIDNotFound() *DiskByIDNotFound {
	return &DiskByIDNotFound{}
}

/*DiskByIDNotFound handles this case with default header values.

Disk not found
*/
type DiskByIDNotFound struct {
}

func (o *DiskByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdNotFound ", 404)
}

func (o *DiskByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
