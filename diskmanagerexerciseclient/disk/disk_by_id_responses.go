// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Stratoscale/disk-manager-exercise/models"
)

// DiskByIDReader is a Reader for the DiskByID structure.
type DiskByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DiskByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDiskByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDiskByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDiskByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDiskByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDiskByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDiskByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDiskByIDOK creates a DiskByIDOK with default headers values
func NewDiskByIDOK() *DiskByIDOK {
	return &DiskByIDOK{}
}

/*DiskByIDOK handles this case with default header values.

successful operation
*/
type DiskByIDOK struct {
	Payload *models.Disk
}

func (o *DiskByIDOK) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdOK  %+v", 200, o.Payload)
}

func (o *DiskByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Disk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDBadRequest creates a DiskByIDBadRequest with default headers values
func NewDiskByIDBadRequest() *DiskByIDBadRequest {
	return &DiskByIDBadRequest{}
}

/*DiskByIDBadRequest handles this case with default header values.

Invalid parameters
*/
type DiskByIDBadRequest struct {
	Payload models.Error400
}

func (o *DiskByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdBadRequest  %+v", 400, o.Payload)
}

func (o *DiskByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDUnauthorized creates a DiskByIDUnauthorized with default headers values
func NewDiskByIDUnauthorized() *DiskByIDUnauthorized {
	return &DiskByIDUnauthorized{}
}

/*DiskByIDUnauthorized handles this case with default header values.

Invalid credentials
*/
type DiskByIDUnauthorized struct {
	Payload models.Error401
}

func (o *DiskByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DiskByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDForbidden creates a DiskByIDForbidden with default headers values
func NewDiskByIDForbidden() *DiskByIDForbidden {
	return &DiskByIDForbidden{}
}

/*DiskByIDForbidden handles this case with default header values.

No permissions
*/
type DiskByIDForbidden struct {
	Payload models.Error403
}

func (o *DiskByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdForbidden  %+v", 403, o.Payload)
}

func (o *DiskByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDNotFound creates a DiskByIDNotFound with default headers values
func NewDiskByIDNotFound() *DiskByIDNotFound {
	return &DiskByIDNotFound{}
}

/*DiskByIDNotFound handles this case with default header values.

Unknown volume
*/
type DiskByIDNotFound struct {
	Payload models.Error404
}

func (o *DiskByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdNotFound  %+v", 404, o.Payload)
}

func (o *DiskByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiskByIDInternalServerError creates a DiskByIDInternalServerError with default headers values
func NewDiskByIDInternalServerError() *DiskByIDInternalServerError {
	return &DiskByIDInternalServerError{}
}

/*DiskByIDInternalServerError handles this case with default header values.

Internal Error
*/
type DiskByIDInternalServerError struct {
	Payload models.Error500
}

func (o *DiskByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /disks/{disk_id}][%d] diskByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DiskByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
